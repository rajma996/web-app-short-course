#+TITLE: Data Model of the User Directory Application
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Initialization

** Imports for Python API
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
# -*- coding: utf-8 -*-

from collections import OrderedDict

from flask.ext.sqlalchemy import SQLAlchemy
from flask import current_app, request
from sqlalchemy.orm import relationship
import sqlalchemy.types as types

import os
import re
from urlparse import urlparse
from datetime import datetime
import json

from op_exceptions import AttributeRequired
from utils import *


db = SQLAlchemy()


# Abstract class to hold common methods
class Entity(db.Model):

    __abstract__ = True

    # save a db.Model to the database. commit it.
    def save(self):
        db.session.add(self)
        db.session.commit()

    # update the object, and commit to the database
    def update(self, **kwargs):
        for attr, val in kwargs.iteritems():
            setter_method = "set_" + attr
            try:
                self.__getattribute__(setter_method)(val)
            except Exception as e:
                raise e

        self.save()

    #print "Setting new val"
    #print "Calling %s on %s" % (method_to_set, curr_entity)
    #try:
    #    getattr(record, method_to_set)(new_val)
    #except Exception as e:
    #pass

    def delete(self):
        db.session.delete(self)
        db.session.commit()

#+END_SRC


** Imports and Initialization of testcases for Python API

#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
# -*- coding: utf-8 -*-

import unittest
from flask.ext.testing import TestCase
from datetime import datetime
# import json

from src.db import *
from src.app import create_app
from src.op_exceptions import AttributeRequired

config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+END_SRC



** Imports for utility functions
   
#+BEGIN_SRC python :tangle ../../src/utils.py :eval no

# module to hold all utilities/helper functions

import json

from flask import make_response, current_app

import re


#+END_SRC


* Utility Functions

*** is_alphabetic_string(value)
    This function take an argument and checks whether the argument contains
    only alphabets.

#+BEGIN_SRC  python :tangle ../../src/utils.py :eval no
def is_alphabetic_string(value):
    if re.search('[^a-zA-Z. ]+', value):
        return False
    else:
        return True
#+END_SRC


*** is_email(value)
    Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
    Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no
def is_email(value):
    if re.search('[^@]+@[^@]+\.[^@]+', value):
        return True
    else:
        return False
#+END_SRC



*** Other function for REST

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no

# module to hold all utilities/helper functions

# return a list of dicts as json with correct mime types
# flask does not provide a jsonify for lists; hence this method
def jsonify_list(data):
    if type(data) is not list:
        raise Exception('jsonify_list function accepts only a list')

    return make_response(json.dumps(data), 200,
                         {'content-type': 'application/json'})


# take in a flask request object and try to parse out a dictionary from the
# request
# try to find if request is as JSON first, then look into forms, finally force
# find it.
# If not found return a dict; else return the parsed data
def parse_request(request):
    if request.json:
        # print 'found in request.json'
        data = request.get_json()

    elif request.data:
        # print 'found in request.data'
        data = json.loads(request.data)

    elif request.form:
        # print 'found in request.form'
        data = request.form.to_dict()
        # try to detect if form contains integers and boolean data and attempt
        # to convert them
        # FIXME: is this a good idea? Fix this to do it in a better way?
        for k in data:
            if is_number(data[k]):
                data[k] = int(data[k])
            if is_bool_in_str(data[k]):
                data[k] = str_to_bool(data[k])

            # print k, data[k]

    else:
        data = request.get_json(force=True)

    if not data:
        return False

    return data


# check if a given string is a number
def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False


# check if in a given string python bool types are represented
def is_bool_in_str(s):
    if s == "True" or s == "False":
        return True
    return False


# convert python bool types in string to native bool types
def str_to_bool(s):
    if s == "True":
        return True
    if s == "False":
        return False
    return None
#+END_SRC


* Object Relational Model

** Name

*** Construction

     Name is an alphabetical string.

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class Name(object):
    value = None
    def __init__(self, value):
        # value: String 
        # if the string contains any non-alphabet and non-space character,
        # raise a type error
        if is_alphabetic_string(value):
            self.value = value
        else:
            raise TypeError('%s is not a Name!' % value)

    def __str__(self):
        return self.value
#+END_SRC


*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class TestName(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_name_type(self):
        print "test_name_type"
        new_name = Name("John")
        # correct name
        self.assertEqual(new_name.value, "John")
        # incorrect name
        self.assertRaises(TypeError, Name, "123dasd")
#+END_SRC


** Email

*** Construction

     Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
     Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class Email(object):
    value = None
    def __init__(self, value):
        if not is_email(value):
            raise TypeError('%s is not an email!' % value)
        self.value = value

    def __str__(self):
        return self.value
#+END_SRC



*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class TestEmail(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_email_type(self):
        print "test_email_type"
        new_email = Email("smith@gmail.com")
        # correct name
        self.assertEqual(new_email.value, "smith@gmail.com")
        # incorrect name
        self.assertRaises(TypeError, Email, "@@@@smithgmail.com")
#+END_SRC



** User

*** Immutable Data
     This is the data associated with Institute type, which is immutable.

     + Id


*** Mutable Data

     These are the data associated with User type, which are mutable

     + Name
     + Email
     + Role


*** Definition
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class User(Entity):

    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))
    name = db.Column(db.String(128), nullable=False)
    email = db.Column(db.String(128), nullable=False, unique=True)

#+END_SRC


*** Constructor

**** Implementation

    Signature of the constructor of =User= is as follows:

    #+BEGIN_EXAMPLE
    usr = User(name=<object of Name>, email=<object of Email>, 
              role=<object of Role>)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def __init__(self, **kwargs):
        if 'email' not in kwargs:
            raise AttributeRequired("email is mandatory")

        if 'name' not in kwargs:
            raise AttributeRequired("name is mandatory")

        if 'role' not in kwargs:
            raise AttributeRequired("Atleast one role is mandatory")

        self.set_email(kwargs['email'])
        self.set_name(kwargs['name'])
        self.set_role(kwargs['role'])
#+END_SRC


**** Test the constructor
 #+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class TestUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_user_creation_without_role(self):
        print "test_user_creation_without_role"
        with self.assertRaises(AttributeRequired):
            user = User(name=Name("Robin Smith"), 
                            email=Email("smith@gmail.com"))

    def test_user_creation_with_role(self):
        print "test_user_creation_with_role"
        role = Role(name=Name("admin"))
        role.save()
        user = User(name=Name("Robin Smith"), 
                    email=Email("smith@gmail.com"),
                    role=Role.get_by_id(1))
        user.save()
        self.assertEqual(user.role.name, "admin")   
 #+END_SRC


*** Functions


**** setRole User, Role ---> NIL

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_role(self, role):
        if not isinstance(role, Role):
            raise TypeError('`role` argument should be of type Role.')
        else:
            self.role = role
#+END_SRC

***** Test setRole to a user 
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_set_toles_to_user(self):
        print "test_set_toles_to_user"
        role = Role(name=Name("admin"))
        role.save()
        user = User(name=Name("Robin Smith"), 
                    email=Email("smith@gmail.com"),
                    role=Role.get_by_id(1))
        user.save()
        role = Role(name=Name("user"))
        user.set_role(role)
        user.save()
        users = User.get_all()
        self.assertEqual(users[0].role.name, "user")
#+END_SRC


**** setEmail
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_email(self, email):
        if not isinstance(email, Email):
            raise TypeError('`email` argument should be of type Email.')
        else:
            self.email = email.value
#+END_SRC


**** setName
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_name(self, name):
        if not isinstance(name, Name):
            raise TypeError('`name` argument should be of type Name.')
        else:
            self.name = name.value
#+END_SRC

**** setRole
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_role(self, role):
        if not isinstance(role, Role):
            raise TypeError('`role` argument should be of type Role.')
        else:
            self.role = role
#+END_SRC


**** getEmail
 #+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_email(self):
        return self.email
 #+END_SRC


**** getName
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_name(self):
        return self.name
#+END_SRC


**** getAll: Nil --> set[User]

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    @staticmethod
    def get_all():

        db.session.autoflush = False
        return User.query.all()
#+END_SRC


***** Test getAll
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_user_get_all(self):
        print "test_user_get_all"
        role = Role(name=Name("Admin"))
        role.save()
        user = User(name=Name("Termite"), 
                    email=Email("tremite@gmail.com"),
                    role=role)
        user.save()
        users = User.get_all()
        self.assertEqual("Admin", users[0].role.name)
#+END_SRC


**** getById : id --> User

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    @staticmethod
    def get_by_id(id):
        return User.query.get(id)
#+END_SRC


***** Test getById: Id --> User
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_get_user_by_id(self):
        print "test_get_user_by_id"
        user = User(name=Name("Robin Smith"), 
                    email=Email("smith@gmail.com"),
                    role=Role(name=Name("admin")))
        user.save()
        self.assertEqual(user.get_by_id(1).role.name, "admin")
        self.assertEqual(user.get_by_id(1).name, "Robin Smith")
#+END_SRC

***** Test updateRole: Role -> Role
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_update_user(self):
        print "test_update_role"
        user = User(name=Name("Robin Smith"), 
                    email=Email("smith@gmail.com"),
                    role=Role(name=Name("admin")))
        user.save()
        u1 = User.get_by_id(1)
        print u1.to_client()
        u1.update(name=Name("Duddley Rod"), 
                  email=Email("duddley@gmail.com"),
                  role=Role(name=Name("owner")))
        print u1.to_client()
        self.assertEqual(u1.get_by_id(1).name, "Duddley Rod")
        self.assertEqual(u1.get_by_id(1).role.name, "owner")
#+END_SRC


**** toClient
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name,
            'email': self.email,
            'role': self.role.to_client()
        }
#+END_SRC



** Role

*** Introduction
   A Role has got certain privileges.  In this current application, the
   privileges are understood 
   
   Different types of roles are:
   - Owner  :: An owner is user an admin who cannot delete himself
   - Admin :: An admin is an user who can add, modify and delete other users
        except owner
   - User :: A User is a user who can view all other users and either modify or
        delete himself.
   - Guest :: A Guest is a user who can view all other users


*** Immutable Data
     This is the data associated with Institute type, which is immutable.

     + Id


*** Mutable Data

     These are the data associated with User type, which are mutable

     + Name


*** Definition
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
class Role(Entity):
    __tablename__ = 'roles'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), unique=True, nullable=False)
    users = db.relationship('User', backref='role')
#+END_SRC


*** Constructor

    The signature of Role is defined as follows
    #+BEGIN_EXAMPLE
    role = Role(name=<Object of Name>)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def __init__(self, **kwargs):
        if 'name' not in kwargs:
            raise AttributeRequired("name is mandatory")

        self.set_name(kwargs['name'])
#+END_SRC


*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
class TestRole(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_role_creation(self):
        print "test_role_creation"
        role = Role(name=Name("admin"))
        role.save()
        self.assertEqual(role.name, "admin")
#+END_SRC


*** Functions

**** setName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_name(self, name):
        if not isinstance(name, Name):
            raise TypeError('`name` argument should be of type Name.')
        else:
            self.name = name.value
#+END_SRC

****** Test
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_role_set_name(self):
        print "test_role_set_name"
        role = Role(name=Name("admin"))
        role.save()
        role.set_name(Name("owner"))
        role.save()
        role = Role.get_by_id(1)
        self.assertEqual(role.name, "owner")
#+END_SRC


**** setUsers Role, Users ---> NIL

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def set_users(self, users):
        type_error = False
        for user in users:
            if not isinstance(user, User):
                type_error = True
                break

        if not type_error:
            self.users = users
        else:
            raise TypeError('`user` argument should be of type User.')
#+END_SRC

***** Test setUsers to a role
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_set_users_to_role(self):
        print "test_set_users_to_role"
#+END_SRC


**** getName

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_name(self):
        return self.name
#+END_SRC


**** getUsers Role ---> set of Users
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_users(self):
        return self.users
#+END_SRC


**** getId

#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def get_id(self):
        return self.id
#+END_SRC


**** getById : id --> Role

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    @staticmethod
    def get_by_id(id):
        return Role.query.get(id)
#+END_SRC


***** Test getById: Id --> Role
 #+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_get_role_by_id(self):
        print "test_get_role_by_id"
        role = Role(name=Name("Admin"))
        role.save()
        self.assertEqual(role.get_by_id(1).name, "Admin")

 #+END_SRC


***** Test updateRole: Role -> Role
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_update_role(self):
        print "test_update_role"
        role = Role(name=Name("Admin"))
        role.save()
        rl = Role.get_by_id(1)
        rl.update(name=Name("owner"))
        self.assertEqual(rl.get_by_id(1).name, "owner")
#+END_SRC


**** getAll: Nil --> set[Role]

***** Implementation
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    @staticmethod
    def get_all():
        return Role.query.all()
#+END_SRC


***** Test getAll: Nil --> set[Role]
 #+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
    def test_role_get_all(self):
        print "test_role_get_all"
        role = Role(name=Name("Admin"))
        role.save()
        roles = Role.get_all()
        self.assertEqual("Admin", roles[0].name)
 #+END_SRC


**** to_client
#+BEGIN_SRC python :tangle ../../src/db.py :eval no
    def to_client(self):
        return {
            'id': self.id,
            'name': self.name
        }

#+END_SRC




* Run Test Cases
 
#+BEGIN_SRC python :tangle ../../tests/test_db.py :eval no
if __name__ == '__main__':
    unittest.main()
#+END_SRC



